#!/bin/bash

# Law Watch API Integration Test Script
# 
# „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØÊú¨Áï™e-Gov APIÁµ±Âêà„ÅÆÂãï‰ΩúÁ¢∫Ë™ç„ÇíË°å„ÅÑ„Åæ„Åô
# 
# ‰ΩøÁî®ÊñπÊ≥ï:
#   chmod +x scripts/test-api-integration.sh
#   ./scripts/test-api-integration.sh [mock|real]

set -e

# „Ç´„É©„ÉºÂá∫ÂäõË®≠ÂÆö
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# „Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö
API_MODE=${1:-mock}
BASE_URL="http://localhost:3000"
TEST_USER_ID="test-user-$(date +%s)"

echo -e "${BLUE}üöÄ Law Watch API Integration Test${NC}"
echo -e "${BLUE}====================================${NC}"
echo -e "Mode: ${YELLOW}$API_MODE${NC}"
echo -e "Base URL: ${YELLOW}$BASE_URL${NC}"
echo -e "Test User ID: ${YELLOW}$TEST_USER_ID${NC}"
echo ""

# jq„ÅÆÂ≠òÂú®Á¢∫Ë™ç
if ! command -v jq &> /dev/null; then
    echo -e "${RED}‚ùå jq is required but not installed. Please install jq first.${NC}"
    echo "  macOS: brew install jq"
    echo "  Ubuntu: sudo apt-get install jq"
    exit 1
fi

# API „Çµ„Éº„Éê„Éº„ÅÆËµ∑ÂãïÁ¢∫Ë™ç
echo -e "${BLUE}üîç Checking API server status...${NC}"
if ! curl -s "$BASE_URL/laws" > /dev/null; then
    echo -e "${RED}‚ùå API server is not running at $BASE_URL${NC}"
    echo "Please start the server with: cd apps/api && pnpm dev"
    exit 1
fi
echo -e "${GREEN}‚úÖ API server is running${NC}"
echo ""

# Test Results Storage
RESULTS_FILE="/tmp/law-watch-test-results-$(date +%s).json"
echo '{"tests": [], "summary": {"total": 0, "passed": 0, "failed": 0}}' > "$RESULTS_FILE"

# Test function
run_test() {
    local test_name="$1"
    local test_command="$2"
    local expected_status="$3"
    
    echo -e "${BLUE}üß™ Test: $test_name${NC}"
    
    if eval "$test_command"; then
        echo -e "${GREEN}‚úÖ PASSED: $test_name${NC}"
        jq ".tests += [{\"name\": \"$test_name\", \"status\": \"passed\"}] | .summary.passed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    else
        echo -e "${RED}‚ùå FAILED: $test_name${NC}"
        jq ".tests += [{\"name\": \"$test_name\", \"status\": \"failed\"}] | .summary.failed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    fi
    echo ""
}

# Test 1: Áõ£Ë¶ñÂØæË±°Ê≥ï‰ª§‰∏ÄË¶ßÂèñÂæóÔºàÂàùÊúüÁä∂ÊÖã„Åß„ÅØ0‰ª∂„ÅÆÂèØËÉΩÊÄß„ÅÇ„ÇäÔºâ
run_test "Áõ£Ë¶ñÂØæË±°Ê≥ï‰ª§‰∏ÄË¶ßÂèñÂæó" \
    'curl -s "$BASE_URL/laws" | jq -e ".totalCount >= 0 and .laws"'

# Test 2: „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ÔºàÂä¥ÂÉçÔºâ
run_test "„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ÔºàÂä¥ÂÉçÔºâ" \
    'curl -s "$BASE_URL/search?q=%E5%8A%B4%E5%83%8D" | jq -e ".totalCount > 0 and (.laws | length) > 0"'

# Test 3: „Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ÔºàÂª∫ÁØâÔºâ
run_test "„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ÔºàÂª∫ÁØâÔºâ" \
    'curl -s "$BASE_URL/search?q=%E5%BB%BA%E7%AF%89" | jq -e ".totalCount >= 0 and .laws"'

# Test 4: Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê
echo -e "${BLUE}üß™ Test: Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê${NC}"
WATCH_LIST_RESPONSE=$(curl -s -X POST "$BASE_URL/monitoring/watch-list" \
    -H "Content-Type: application/json" \
    -d "{
        \"userId\": \"$TEST_USER_ID\",
        \"name\": \"„ÉÜ„Çπ„ÉàÁõ£Ë¶ñ„É™„Çπ„Éà\"
    }")

if echo "$WATCH_LIST_RESPONSE" | jq -e '.success == true' > /dev/null; then
    WATCH_LIST_ID=$(echo "$WATCH_LIST_RESPONSE" | jq -r '.watchList.id')
    echo -e "${GREEN}‚úÖ PASSED: Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê (ID: $WATCH_LIST_ID)${NC}"
    jq ".tests += [{\"name\": \"Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê\", \"status\": \"passed\"}] | .summary.passed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
else
    echo -e "${RED}‚ùå FAILED: Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê${NC}"
    echo "Response: $WATCH_LIST_RESPONSE"
    jq ".tests += [{\"name\": \"Áõ£Ë¶ñ„É™„Çπ„Éà‰ΩúÊàê\", \"status\": \"failed\"}] | .summary.failed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    WATCH_LIST_ID=""
fi
echo ""

# Test 5: Ê≥ï‰ª§„ÇíÁõ£Ë¶ñ„É™„Çπ„Éà„Å´ËøΩÂä†Ôºàe-Gov API„Åã„Çâ„Éá„Éº„ÇøÂèñÂæó„Éª‰øùÂ≠ò„Çí„ÉÜ„Çπ„ÉàÔºâ
if [ -n "$WATCH_LIST_ID" ]; then
    echo -e "${BLUE}üß™ Test: Ê≥ï‰ª§Áõ£Ë¶ñËøΩÂä†Ôºàe-Gov API„Åã„Çâ„Éá„Éº„ÇøÂèñÂæóÔºâ${NC}"
    echo -e "${YELLOW}„ÉÜ„Çπ„ÉàÂØæË±°Ê≥ï‰ª§: Âä¥ÂÉçÂü∫Ê∫ñÊ≥ï (322AC0000000049)${NC}"
    
    # Â§âÊõ¥Ê§úÁü•„Ç∑„Çπ„ÉÜ„É†„ÅÆÊ≠£„Åó„ÅÑÂãï‰Ωú„Çí„ÉÜ„Çπ„ÉàÔºö
    # 1. Ê≥ï‰ª§IDÂÖ•Âäõ ‚Üí 2. e-Gov API„Åã„ÇâÂèñÂæó ‚Üí 3. DB‰øùÂ≠ò ‚Üí 4. Áõ£Ë¶ñ„É™„Çπ„ÉàËøΩÂä†
    WATCH_ADD_RESPONSE=$(curl -s -X POST "$BASE_URL/monitoring/watch" \
        -H "Content-Type: application/json" \
        -d "{
            \"watchListId\": \"$WATCH_LIST_ID\",
            \"lawId\": \"322AC0000000049\"
        }")
    
    if echo "$WATCH_ADD_RESPONSE" | jq -e '.success == true' > /dev/null; then
        echo -e "${GREEN}‚úÖ PASSED: Ê≥ï‰ª§Áõ£Ë¶ñËøΩÂä†Ôºàe-Gov API„Åã„Çâ„Éá„Éº„ÇøÂèñÂæóÊàêÂäüÔºâ${NC}"
        
        # Ê≥ï‰ª§„Åå„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Åü„ÅãÁ¢∫Ë™ç
        LAWS_AFTER=$(curl -s "$BASE_URL/laws")
        LAW_ADDED=$(echo "$LAWS_AFTER" | jq -e '.laws[] | select(.id == "322AC0000000049")' > /dev/null && echo "true" || echo "false")
        
        if [ "$LAW_ADDED" = "true" ]; then
            echo -e "${GREEN}‚úÖ Á¢∫Ë™ç: Ê≥ï‰ª§„Éá„Éº„Çø„Åå„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Åæ„Åó„Åü${NC}"
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Ê≥ï‰ª§„Éá„Éº„Çø„ÅÆ‰øùÂ≠òÁ¢∫Ë™ç„Å´Â§±Êïó${NC}"
        fi
        
        jq ".tests += [{\"name\": \"Ê≥ï‰ª§Áõ£Ë¶ñËøΩÂä†Ôºàe-Gov APIÈÄ£Êê∫Ôºâ\", \"status\": \"passed\"}] | .summary.passed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    else
        echo -e "${RED}‚ùå FAILED: Ê≥ï‰ª§Áõ£Ë¶ñËøΩÂä†${NC}"
        echo "Response: $WATCH_ADD_RESPONSE"
        jq ".tests += [{\"name\": \"Ê≥ï‰ª§Áõ£Ë¶ñËøΩÂä†Ôºàe-Gov APIÈÄ£Êê∫Ôºâ\", \"status\": \"failed\"}] | .summary.failed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    fi
    echo ""
fi

# Test 6: Áõ£Ë¶ñ„É™„Çπ„ÉàË©≥Á¥∞ÂèñÂæó
if [ -n "$WATCH_LIST_ID" ]; then
    run_test "Áõ£Ë¶ñ„É™„Çπ„ÉàË©≥Á¥∞ÂèñÂæó" \
        'curl -s "$BASE_URL/monitoring/watch/detail/$WATCH_LIST_ID" | jq -e ".success == true"'
fi

# Test 7: „É¶„Éº„Ç∂„Éº„ÅÆÁõ£Ë¶ñ„É™„Çπ„Éà‰∏ÄË¶ßÂèñÂæó
run_test "„É¶„Éº„Ç∂„ÉºÁõ£Ë¶ñ„É™„Çπ„Éà‰∏ÄË¶ß" \
    'curl -s "$BASE_URL/monitoring/watch/$TEST_USER_ID" | jq -e ".success == true"'

# Test 8: Â§âÊõ¥„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
run_test "Â§âÊõ¥„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥" \
    'curl -s -X POST "$BASE_URL/monitoring/simulate-change" | jq -e ".success == true"'

# Test 9: Â§âÊõ¥Ê§úÁü•ÂÆüË°å
echo -e "${BLUE}üß™ Test: Â§âÊõ¥Ê§úÁü•ÂÆüË°åÔºà„É°„Éº„É´ÈÄÅ‰ø°Ôºâ${NC}"
DETECT_RESPONSE=$(curl -s -X POST "$BASE_URL/monitoring/detect-changes")

if echo "$DETECT_RESPONSE" | jq -e '.success == true' > /dev/null; then
    echo -e "${GREEN}‚úÖ PASSED: Â§âÊõ¥Ê§úÁü•ÂÆüË°å${NC}"
    
    # Ethereal Email„ÅÆÊÉÖÂ†±„Åå„ÅÇ„Çå„Å∞Ë°®Á§∫
    PREVIEW_URL=$(echo "$DETECT_RESPONSE" | jq -r '.emailInfo.previewUrl // empty')
    if [ -n "$PREVIEW_URL" ] && [ "$PREVIEW_URL" != "null" ]; then
        echo -e "${BLUE}üìß Email Preview URL: ${YELLOW}$PREVIEW_URL${NC}"
    fi
    
    jq ".tests += [{\"name\": \"Â§âÊõ¥Ê§úÁü•ÂÆüË°å\", \"status\": \"passed\"}] | .summary.passed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
else
    echo -e "${RED}‚ùå FAILED: Â§âÊõ¥Ê§úÁü•ÂÆüË°å${NC}"
    echo "Response: $DETECT_RESPONSE"
    jq ".tests += [{\"name\": \"Â§âÊõ¥Ê§úÁü•ÂÆüË°å\", \"status\": \"failed\"}] | .summary.failed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
fi
echo ""

# Test 10: ÈÄöÁü•‰∏ÄË¶ßÂèñÂæó
run_test "ÈÄöÁü•‰∏ÄË¶ßÂèñÂæó" \
    'curl -s "$BASE_URL/monitoring/notifications/$TEST_USER_ID" | jq -e ".success == true"'

# Test 11: Âà•„ÅÆÊ≥ï‰ª§„ÇíËøΩÂä†ÔºàÂª∫ÁØâÂü∫Ê∫ñÊ≥ïÔºâ„Åße-Gov APIÂãï‰ΩúÁ¢∫Ë™ç
if [ -n "$WATCH_LIST_ID" ]; then
    echo -e "${BLUE}üß™ Test: Âà•Ê≥ï‰ª§ËøΩÂä†„ÉÜ„Çπ„ÉàÔºàÂª∫ÁØâÂü∫Ê∫ñÊ≥ïÔºâ${NC}"
    echo -e "${YELLOW}„ÉÜ„Çπ„ÉàÂØæË±°Ê≥ï‰ª§: Âª∫ÁØâÂü∫Ê∫ñÊ≥ï (325AC1000000201)${NC}"
    
    SECOND_LAW_RESPONSE=$(curl -s -X POST "$BASE_URL/monitoring/watch" \
        -H "Content-Type: application/json" \
        -d "{
            \"watchListId\": \"$WATCH_LIST_ID\",
            \"lawId\": \"325AC1000000201\"
        }")
    
    if echo "$SECOND_LAW_RESPONSE" | jq -e '.success == true' > /dev/null; then
        echo -e "${GREEN}‚úÖ PASSED: Âà•Ê≥ï‰ª§ËøΩÂä†„ÉÜ„Çπ„Éà${NC}"
        
        # Áõ£Ë¶ñÂØæË±°Ê≥ï‰ª§Êï∞„ÅÆÁ¢∫Ë™ç
        FINAL_LAWS=$(curl -s "$BASE_URL/laws")
        LAW_COUNT=$(echo "$FINAL_LAWS" | jq '.totalCount')
        echo -e "${BLUE}üìä ÊúÄÁµÇÁõ£Ë¶ñÂØæË±°Ê≥ï‰ª§Êï∞: ${YELLOW}$LAW_COUNT‰ª∂${NC}"
        
        jq ".tests += [{\"name\": \"Âà•Ê≥ï‰ª§ËøΩÂä†„ÉÜ„Çπ„Éà\", \"status\": \"passed\"}] | .summary.passed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    else
        echo -e "${RED}‚ùå FAILED: Âà•Ê≥ï‰ª§ËøΩÂä†„ÉÜ„Çπ„Éà${NC}"
        jq ".tests += [{\"name\": \"Âà•Ê≥ï‰ª§ËøΩÂä†„ÉÜ„Çπ„Éà\", \"status\": \"failed\"}] | .summary.failed += 1 | .summary.total += 1" "$RESULTS_FILE" > "${RESULTS_FILE}.tmp" && mv "${RESULTS_FILE}.tmp" "$RESULTS_FILE"
    fi
    echo ""
fi

# Test Results Summary
echo -e "${BLUE}üìä Test Results Summary${NC}"
echo -e "${BLUE}======================${NC}"

SUMMARY=$(jq -r '.summary | "Total: \(.total), Passed: \(.passed), Failed: \(.failed)"' "$RESULTS_FILE")
PASSED=$(jq -r '.summary.passed' "$RESULTS_FILE")
TOTAL=$(jq -r '.summary.total' "$RESULTS_FILE")

echo -e "Results: $SUMMARY"

if [ "$PASSED" -eq "$TOTAL" ]; then
    echo -e "${GREEN}üéâ All tests passed!${NC}"
    SUCCESS_RATE="100%"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Some tests failed or were skipped${NC}"
    SUCCESS_RATE=$(echo "scale=1; $PASSED * 100 / $TOTAL" | bc -l)"%"
fi

echo -e "Success Rate: ${GREEN}$SUCCESS_RATE${NC}"
echo ""

# Failed tests details
FAILED_TESTS=$(jq -r '.tests[] | select(.status == "failed") | .name' "$RESULTS_FILE")
if [ -n "$FAILED_TESTS" ]; then
    echo -e "${RED}Failed Tests:${NC}"
    echo "$FAILED_TESTS" | while read -r test; do
        echo -e "  ${RED}- $test${NC}"
    done
    echo ""
fi

# Environment info
echo -e "${BLUE}üîß Environment Info${NC}"
echo -e "${BLUE}==================${NC}"
echo -e "API Mode: ${YELLOW}$API_MODE${NC}"
echo -e "Base URL: ${YELLOW}$BASE_URL${NC}"
echo -e "Test Results File: ${YELLOW}$RESULTS_FILE${NC}"

# Cleanup option
echo ""
read -p "Delete test results file? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm "$RESULTS_FILE"
    echo -e "${GREEN}‚úÖ Test results file deleted${NC}"
else
    echo -e "${BLUE}üìÅ Test results saved to: $RESULTS_FILE${NC}"
fi

# Exit with appropriate code
if [ "$PASSED" -eq "$TOTAL" ]; then
    exit 0
else
    exit 1
fi